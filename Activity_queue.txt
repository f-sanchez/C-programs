/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

  #include <stdio.h>
  #include <stdlib.h>
  #define SIZE 5        //set max size

    
    int rear = -1; //aka tail
    int front = -1; //aka hea
    int size = 0; //number of queue items

//queue full
int isFull(int queue[]){
    return (queue[rear] == queue[SIZE-1]); //returns true (1) if full
}

//queue empty
int isEmpty(){
    return(rear < 0);
}

void enqueue(int queue[], int item){
    if (front == -1)
        printf("Front: %d\n", front);
        front++;\
        printf("Front: %d\n", front);
        
    if (rear == SIZE-1){
        printf("Queue overflow.\n");
        return;
    } else {
        queue[++rear] = item;
        printf("element added to queue: %d\n", item);
    }
}

int dequeue(int queue[]){
    if ((rear && front) == -1){
        printf("Queue underflow.\n");
    } 
    // else {
    //     return queue[0];
    //     int i;
    //     for (i=0; i<rear-1; i++){
    //         queue[i] = queue[i+1];
    //         // rear--;
    //     }
    // }
    return queue[++front];
    //rear--;
}

//get front of queue
int getFront(int queue[]){
    return queue[front];
}

//get rear of queue
int getRear(int queue[]){
    return queue[rear];
}

void display(int queue[]){
    int i;
    if (isEmpty()){
        printf("Queue empty.\n");
    } else {
        printf("Queue: ");
        for (i=front; i<=rear; i++){
            if (i == rear){
                printf("[%d] =>%d) ", i, queue[i]);
            } else {
                printf("([%d] =>%d, ", i, queue[i]);
            }
            
        }
    }
    printf("\n");
}

int main(){
    int queue[SIZE];
    int choice;
    int item;
    while(1){
        printf("[1] enqueue\n");
        printf("[2] dequeue\n");
        printf("[3] isFull\n");
        printf("[4] isEmpty\n");
        printf("[5] getFront\n");
        printf("[6] getRear\n");
        printf("[7] print\n");
        printf("[0] Exit\n");
        scanf("%d", &choice);
        switch(choice){
            case 1: printf("Enter item: ");
                    int item;
                    scanf("%d", &item);
                    fflush(stdin);
                    enqueue(queue, item);
                    display(queue);
                    break;
            case 2: dequeue(queue);
                    display(queue);
                    break;
            case 3: printf("isFull (yes-1 | no- 0): %d\n", (isFull(queue)));
                    break;
            case 4: printf("isEmpty (yes-1 | no- 0): %d\n", isEmpty());
                    break;
            case 5: printf("Front: %d\n", getFront(queue));
                    break;
            case 6: printf("Rear: %d\n", getRear(queue));
                    break;
            case 7: display(queue);
                    break;
            case 0: exit(0);
            default: 
                    printf("Please select a valid key.\n");
                    break;
        }
        
    }
    
}

/*

return a[0];    //returning first element
for (i = 0; i < tail-1; i++)    //shifting all other elements
{
    a[i] = a[i+1];
    tail--;
}
*/

